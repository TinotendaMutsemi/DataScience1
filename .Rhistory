variance <- 0.4
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, 2.7*y_normal, col = 'red')
fx <- function(x){
return(exp((-x**2)/2)*((sin(2*x))**2))
}
y <- fx(x)
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 0.4
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, 2.7*y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 0.4
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, 2.7*y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 3*0.4
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, 2.7*y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 3*0.4
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 3*1
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 1
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 1.4
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 1.4
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, 2.7*
x <- seq(-5,5,0.1)
y <- fx(x)
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 1.4
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, 2.7*y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 1.4
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, 2.9*y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 1.4
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, 3*y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 1
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, 3*y_normal, col = 'red')
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 1
y_normal <- dnorm(x, mean, variance)
#add the normal distribution to the plot
lines(x, 2.5*y_normal, col = 'red')
fx <- function(x){
return(exp((-x**2)/2)*((sin(2*x))**2))
}
y_normal <- function(x, c){
return(c*(dnorm(x, mean, variance)))
}
sample(y_normal(x, 2.5), 10)
sample(runif(0,1), 10)
sample(dunif(0,1), 10)
sample(y_normal(x, 2.5), 10)
runif(10,min = 0, max = 1)
x <- seq(-5,5,0.1)
y <- fx(x)
plot.new
plot(x, y, type = 'l')
mean <- 0
variance <- 1
#add the normal distribution to the plot
lines(x, y_normal(x, 2.5), col = 'red')
sample(y_normal(x, 2.5), 1)
sample(y_normal(x, 2.5), 1)
sample(y_normal(x, 2.5), 1)
sample(y_normal(x, 2.5), 1)
sample(y_normal(x, 2.5), 1)
sample(y_normal(x, 2.5), 1)
sample(y_normal(x, 2.5), 1)
sample(x, 1)
sample(x, 1)
sample_x <- sample(x, 1)
fx <- y_normal(sample_x, 2.5)
fx
chx <- y_normal(sample_x, 2.5)
chx
gx <- fx/chx
gx
fx <- function(x){
return(exp((-x**2)/2)*((sin(2*x))**2))
}
chx <- function(x, c){
mean <- 0
variance <- 1
#scalar c * normal with mean and var
return(c*(dnorm(x, mean, variance)))
}
sample_x <- sample(x, 1)
fx_val <- fx(sample_x, 2.5)
fx
sample_x <- sample(x, 1)
fx_val <- fx(sample_x, 2.5)
fx <- function(x){
return(exp((-x**2)/2)*((sin(2*x))**2))
}
chx <- function(x, c){
mean <- 0
variance <- 1
#scalar c * normal with mean and var
return(c*(dnorm(x, mean, variance)))
}
sample_x <- sample(x, 1)
sample_x
fx_val <- fx(sample_x)
fx
fx_val
chx_val <- chx(sample_x, 2.5)
chx
chx_val
gx <- fx_val/chx_val
gx
runif(10,min = 0, max = 1)
runif(1,min = 0, max = 1)
gx
library(ggplot2)
#read data
lex <- read.csv("lex.csv")
#read data
lex <- read.csv("lex.csv")
View(lex)
gdp_pcap <- read.csv("gdp_pcap.csv")
View(gdp_pcap)
region <- read.xlsx("Data Geographies - v2 - by Gapminder.xlsx")
region <- read.xlsx2("Data Geographies - v2 - by Gapminder.xlsx")
library(xlsx2)
?xlsx
region <- read.xlsx("Data Geographies - v2 - by Gapminder.xlsx")
file <- system.file("Data Geographies - v2 - by Gapminder.xlsx", package = "xlsx")
res <- read.xlsx(file, 1)  # read the second sheet
install.packages("xlsx")
install.packages("xlsx")
library(xlsx)
res <- read.xlsx(file, 1)  # read the second sheet
file <- system.file("Data Geographies - v2 - by Gapminder.xlsx", package = "xlsx")
res <- read.xlsx(file, 1)  # read the second sheet
region <- read.xlsx("Data Geographies - v2 - by Gapminder.xlsx")
region <- read.xlsx("Data Geographies - v2 - by Gapminder.xlsx", sheetIndex = 1)
View(region)
region <- read.xlsx("Data Geographies - v2 - by Gapminder.xlsx", sheetIndex = 2)
View(region)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(xlsx)
View(lex)
#Qtn 1a
#data cleaning and selcting required data
lex_2019 <- select(lex, country, X2019)
head(lex_2019)
View(gdp_pcap)
gdp_pcap_2019 <- select(gdp_pcap, country, X2019)
head(gdp_pcap_2019)
View(region)
View(region)
region <- select(region, name, four_regions)
head(region)
#rename region col names
region |> rename(name: country, four_regions: region)
#rename region col names
region <- rename(region, name: country, four_regions: region)
head(region)
#read data
lex_raw <- read.csv("lex.csv")
gdp_pcap_raw <- read.csv("gdp_pcap.csv")
region_raw <- read.xlsx("Data Geographies - v2 - by Gapminder.xlsx", sheetIndex = 2)
library(dplyr)
library(ggplot2)
library(xlsx)
#read data
lex_raw <- read.csv("lex.csv")
gdp_pcap_raw <- read.csv("gdp_pcap.csv")
region_raw <- read.xlsx("Data Geographies - v2 - by Gapminder.xlsx", sheetIndex = 2)
#Qtn 1a
#data cleaning and selcting required data
lex_2019 <- select(lex_raw, country, X2019)
gdp_pcap_2019 <- select(gdp_pcap_raw, country, X2019)
region <- select(region_raw, name, four_regions)
#rename region col names
regions <- rename(region, name: country, four_regions: region)
#rename region col names
regions <- rename(region, name = country, four_regions = region)
head(region)
#rename region col names
rename(region, name = country, four_regions = region)
#read data
lex_raw <- read.csv("lex.csv")
gdp_pcap_raw <- read.csv("gdp_pcap.csv")
region_raw <- read.xlsx("Data Geographies - v2 - by Gapminder.xlsx", sheetIndex = 2)
#Qtn 1a
#data cleaning and selcting required data
lex_2019 <- select(lex_raw, country, X2019)
gdp_pcap_2019 <- select(gdp_pcap_raw, country, X2019)
region <- select(region_raw, name, four_regions)
#rename region col names
rename(region, name = country, four_regions = region)
head(region)
#rename region col names
rename(region, name = country)
head(region)
#rename region col names
rename(region, country = name)
head(region)
region <- select(region_raw, name, four_regions)
head(region)
#rename region col names
rename(region, country = name, regioin = four_regions)
#Qtn 1a
#data cleaning and selcting required data
lex_2019 <- select(lex_raw, country, X2019)
gdp_pcap_2019 <- select(gdp_pcap_raw, country, X2019)
#rename region col names
region <- select(region_raw, name, four_regions) |> rename(region, country = name, region = four_regions)
region <- select(region_raw, name, four_regions) |> rename(all_of(lookup))
#rename region col names
lookup <- c(country = "name",
region = "four_regions")
region <- select(region_raw, name, four_regions) |> rename(all_of(lookup))
head(region)
head(gdp_pcap_2019)
head(lex_2019)
?join
#merge data frames
full_join(lex_2019, gdp_pcap_2019, by = join_by(country))
#merge data frames
lex_gdp_2019 <- full_join(lex_2019, gdp_pcap_2019, by = join_by(country))
lex_gdp_region_2019 <- full_join(lex_gdp_2019, region, by = join_by(country))
head(lex_gdp_region_2019)
#rename cols of new df
lookup <- c(lex = "X2019.x",
gdp_pcap = "X2019.y")
lex_gdp_region_2019 <- rename(lex_gdp_region_2019, all_of(lookup))
head(lex_gdp_region_2019)
?ggplot2
?aes
?ggplot()
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, x = gdp_pcap, y = lex) +
geom_point()
ggplot()
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex)) +
geom_point()
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex)) +
geom_point()
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex)) +
geom_point(
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex)) +
geom_point() +
geom_point(
mapping = aes(x = gdp_pcap, y = lex),
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019) +
geom_point() +
geom_point(
mapping = aes(x = gdp_pcap, y = lex),
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex)) +
geom_point() +
geom_point(
# mapping = aes(x = gdp_pcap, y = lex),
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex)) +
geom_point() +
geom_point(
mapping = aes(x = gdp_pcap),
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex)) +
geom_point() +
geom_point(
mapping = aes(y = lex),
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex)) +
geom_point() +
geom_point(
mapping = aes(y = lex),
data = lex_gdp_region_2019
colour = region
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex)) +
geom_point() +
geom_point(
mapping = aes(y = lex),
data = lex_gdp_region_2019,
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019) +
geom_point(mapping = aes(x = gdp_pcap, y = lex)) +
geom_point(
mapping = aes(y = length(lex_gdp_region_2019)),
data = lex_gdp_region_2019,
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019) +
geom_point(mapping = aes(x = gdp_pcap, y = lex)) +
geom_point(
mapping = aes(x = length(lex_gdp_region_2019),y = length(lex_gdp_region_2019)),
data = lex_gdp_region_2019,
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019) +
geom_point(mapping = aes(x = gdp_pcap, y = lex)) +
geom_point(
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019) +
geom_point(mapping = aes(x = gdp_pcap, y = lex)) +
geom_point(
mapping = aes(x = length(lex_gdp_region_2019),y = length(lex_gdp_region_2019)),
colour = region
)
mapping = aes(x = 1,y = 1,
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019) +
geom_point(mapping = aes(x = gdp_pcap, y = lex)) +
geom_point(
mapping = aes(x = 1,y = 1),
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019) +
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019) +
geom_point(mapping = aes(x = gdp_pcap, y = lex)) +
geom_point(
mapping = aes(x = 1,y = 1),
colour = region
)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019) +
geom_point(mapping = aes(x = gdp_pcap, y = lex),
colour = region)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex),
colour = region)
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex),
colour = region) +
geom_point()
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex
colour = region)) +
#scatter plot with ggplot
ggplot(data = lex_gdp_region_2019, mapping = aes(x = gdp_pcap, y = lex,
colour = region)) +
geom_point()
View(gdp_pcap_raw)
View(region)
View(region_raw)
population_raw <- read.xlsx("GM-Population - Dataset - v6.xlsx", sheetIndex = 4)
population_raw <- read.xlsx("GM-Population - Dataset - v6.xlsx", sheetIndex = 4)
head(population_raw)
#deselect col
population_raw <- select(population_raw, -geo)
#rename cols
lookup <- c(country = "name",
year = "time",
population = "Population")
population_raw <- rename(population_raw, all_of(lookup))
#select 2019 population
filter(population_raw, year == 2019)
#read data
lex_raw <- read.csv("lex.csv")
gdp_pcap_raw <- read.csv("gdp_pcap.csv")
region_raw <- read.xlsx("Data Geographies - v2 - by Gapminder.xlsx", sheetIndex = 2)
population_raw <- read.xlsx("GM-Population - Dataset - v6.xlsx", sheetIndex = 4)
#Qtn 1a
#data cleaning and selcting required data
lex_2019 <- select(lex_raw, country, X2019)
gdp_pcap_2019 <- select(gdp_pcap_raw, country, X2019)
#region data
#rename region col names
lookup <- c(country = "name",
region = "four_regions")
region <- select(region_raw, name, four_regions) |> rename(all_of(lookup))
#population data
#deselect col
population_raw <- select(population_raw, -geo)
#rename cols
lookup <- c(country = "name",
year = "time",
population = "Population")
population_raw <- rename(population_raw, all_of(lookup))
#select 2019 population
population_2019 <- filter(population_raw, year == 2019)
#merge and clean data frames
lex_gdp_2019 <- full_join(lex_2019, gdp_pcap_2019, by = join_by(country))
lex_gdp_region_2019 <- full_join(lex_gdp_2019, region, by = join_by(country))
#rename cols of new df
lookup <- c(lex = "X2019.x",
gdp_pcap = "X2019.y")
lex_gdp_region_2019 <- rename(lex_gdp_region_2019, all_of(lookup))
#Qtn 1a
#data cleaning and selcting required data
lex_2019 <- select(lex_raw, country, X2019)
gdp_pcap_2019 <- select(gdp_pcap_raw, country, X2019)
#region data
#rename region col names
lookup <- c(country = "name",
region = "four_regions")
region <- select(region_raw, name, four_regions) |> rename(all_of(lookup))
#population data
#deselect col
population_raw <- select(population_raw, -geo)
#read data
lex_raw <- read.csv("lex.csv")
gdp_pcap_raw <- read.csv("gdp_pcap.csv")
region_raw <- read.xlsx("Data Geographies - v2 - by Gapminder.xlsx", sheetIndex = 2)
population_raw <- read.xlsx("GM-Population - Dataset - v6.xlsx", sheetIndex = 4)
population_raw <- read.xlsx("GM-Population - Dataset - v6.xlsx", sheetIndex = 4)
