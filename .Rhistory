library(xgboost)
library(xgboost)
install.packages('gbm')
library(gbm)
library(xgboost)
#fit the model using xgbTree
xgb_grid <- expand.grid(nrounds = 100,
max_depth = 1:10,
eta = c(0.01, 0.1, 0.3),
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1)
xgb_control <- trainControl(method = 'repeatedcv', number = 10, repeats = 10)
#fit the model using xgbTree
library(caret)
xgb_grid <- expand.grid(nrounds = 100,
max_depth = 1:10,
eta = c(0.01, 0.1, 0.3),
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1)
xgb_control <- trainControl(method = 'repeatedcv', number = 10, repeats = 10)
xgb_model <- train(total_UPDRS ~ .,
data = parkinsons,
subset = train_index,
method = 'xgbTree',
trControl = xgb_control,
tuneGrid = xgb_grid)
#Qtn 3
library(corrplot)
library(kableExtra)
library(broom)
library(dplyr)
#load the data
parkinsons <- read.csv("Q3dat.csv",
colClasses = c(sex = 'factor'))
str(parkinsons)
#split the data
set.seed(0)
train_index <- sample(nrow(parkinsons), size = 0.8*nrow(parkinsons))
#EDA
#fitting vannila logistic regression
parkinsons_lr <- glm(total_UPDRS ~ ., data = parkinsons, subset = train_index, family = 'gaussian')
parkinsons_lr |> tidy() |> kable(digits = 2, caption = 'Saturated logistic regression model fitted to UPDRS data')
x_train_cor <- select(parkinsons, -sex,) |> slice(train_index)
corrplot(cor(x_train_cor))
#Set data for train and test
x_train <- select(parkinsons, -total_UPDRS,) |> slice(train_index)
x_test <- select(parkinsons, -total_UPDRS,) |> slice(-train_index)
x_train <- as.matrix(x_train)
x_test <- as.matrix(x_test)
y_train <- parkinsons$total_UPDRS[train_index]
#fit the model using xgbTree
library(caret)
xgb_grid <- expand.grid(nrounds = 100,
max_depth = 1:10,
eta = c(0.01, 0.1, 0.3),
gamma = 0,
colsample_bytree = 1,
min_child_weight = 1,
subsample = 1)
xgb_control <- trainControl(method = 'repeatedcv', number = 10, repeats = 10)
xgb_model <- train(total_UPDRS ~ .,
data = parkinsons,
subset = train_index,
method = 'xgbTree',
trControl = xgb_control,
tuneGrid = xgb_grid)
