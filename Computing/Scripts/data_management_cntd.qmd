---
title: "Part 2: Data Management & Visualization"
subtitle: "Statistical Computing with R"
author: "Birgit Erni "
institute: "Department of Statistical Sciences, University of Cape Twon"
date:  "`r format(Sys.time(), '%d %B %Y')`"

format: 
  html:
    code-background: true
editor: visual
pdf-engine: pdflatex
css: style.css
title-slide-attributes: 
  data-background-image: statslogo.jpg, UCTNewCrest.JPG
  data-background-size: 15%, 15%
  data-background-position: 0% 95%, 95% 95%

execute: 
  echo: true
  eval: false
  warning: false
  message: false
---

# Today

-   merging data files

-   strings and regular expressions

-   ggplot

# Merging Data Frames

-   merge several data files into a single data frame

-   collect all variables for a specific person (or country, site, etc.)

-   row variable: `id.variable` (used as link between different data files): `by` argument (or `by.x`, `by.y` if their names differ in the two data frames)

-   data set 1: longitude and latitude per site, 2. temperature measurements for the sites.

```{r merge}
## data frame with site, longitude and latitude
sites <- data.frame(site = LETTERS[1:5], 
                    lon = c(18, 25, 34, 20, 19), 
                    lat = c(-27, -33, -29, -30, -31))
sites                      
                      
## data frame with temperature measured at sites                      
temp <- data.frame(site = c("B", "C", "A", "A", "B", "E", "F"),
                   temp = c(25, 16, 40, 23, 19, 25, 28))                      
temp
                      
merge(x = sites, y = temp, by = "site")#all.x = True, all.y = True (to show all the rows in x and/or in y )
```

## Merge with `dplyr`

```{r}
library(dplyr)
sites |> inner_join(temp, by = 'site')

sites |> left_join(temp, by = 'site')

sites |> right_join(temp, by = 'site')

sites |> full_join(temp, by = 'site')
```

## Prac: Merging Data Frames

1.  Read in the CO2 and population size data sets. These are from Gapminder:
    -   indicator gapminder population.xlsx
    -   indicator CDIAC carbon_dioxide_emissions_per_capita.xlsx
2.  Extract 2010 data from both.
3.  Merge
4.  Population size of country with highest per capita CO2 emissions in 2010? (1 765 513)
5.  Number of rows in the merged data frame? (275)
6.  What is the correlation between per capita CO2 emissions and population size? (-0.02)


```{r}
library(xlsx)
population <- read.xlsx("indicator gapminder population.xlsx", sheetIndex = 1)
co2 <- read.xlsx("indicator CDIAC carbon_dioxide_emissions_per_capita.xlsx", sheetIndex = 1)


population.2010 <- select(population, Total.population, X2010)
co2.2010 <- select(co2, CO2.per.capita, X2010)

#using dplyr to merge
population.co2.2010 <- full_join(population.2010, co2.2010, join_by(Total.population == CO2.per.capita))

head(population.co2.2010)

population.co2.2010$co2percap <- population.co2.2010$X2010.y / population.co2.2010$X2010.x

population.co2.2010 |> summarise(max(co2percap))
```


# Strings and regular expressions

**Text data**: websites, emails (spam or not), search (Google search), text analysis (<http://varianceexplained.org/r/trump-tweets/>)

**String**: sequence of characters bound together

```{r, eval = FALSE, echo = TRUE}
book1 <- "Things fall apart"   # quotes
class(book1)
class("Q")
nchar(book1)
length(book1)  # vector of length 1
(books <- c(book1, "Pubple Hibiscus"))  # vector of length 2
str(books)
```

## Substrings, combining strings

```{r, eval = FALSE, echo = TRUE}
substr(book1, start = 1, stop = 5)
substr(books, start = 1, stop = 5)

strsplit(book1, " ")   # returns a list!!
strsplit(book1, " ")[[1]][1]
as.character(c(1, 3, 5))

paste(1:2, books)
paste(1:2, ". ", books, sep = "")
```

## Special characters

-   Use escape character `\`

```{r}
dbl_quote <- "She said, \"I don't know!\"" 
writeLines(dbl_quote)

two_lines <- "first line \n second line"
writeLines(two_lines)
```

-   What about `60 US$`?
```{r}
```


## Regular Expressions

-   search for patterns in text

-   Bioinformatics: all locations with a particular sequence of nucleotide bases (e.g. GCUT)

-   all occurrences of `Africa` in a text (including `African`, `Africa's`, etc.).

**Regular expression**: sequence of characters that describe a string pattern (language)

## Regular Expressions

| Regular expression | search for                                        |
|--------------------|:--------------------------------------------------|
| `er`               | er                                                |
| `gray|grey`        | gray or grey                                      |
| `e.r`              | e followed by any single character followed by r  |
| `a?b`              | a at most once, followed by b                     |
| `a*b`              | 0 or more a's, followed by b                      |
| `a+b`              | 1 or more a's, followed by b                      |
| `a\{2\}b`          | exactly 2 a's, followed by b                      |
| `a\{2, \}b`        | 2 or more a's, followed by b                      |
| `a\{2, 3\}b`       | at least 2 but not more than 3 a's, followed by b |
| `\^{}b`            | starts with b                                     |
| `b\$`              | ends with b                                       |
| `"\\."`            | .                                                 |
| `"\\\\"`           | \\                                                |

## Example -- grep, grepl

```{r, echo = TRUE, eval = FALSE}
# first 2 sentences in Wikipedia Analytics
txt <- "Analytics is the discovery, interpretation, and communication of meaningful patterns in data. Especially valuable in areas rich with recorded information, analytics relies on the simultaneous application of statistics, computer programming and operations research to quantify performance."

txt <- strsplit(txt, " ")   # list with 1 vector
txt
txt[[1]]   # returns first object in list
txt[1]     # returns first object in list as a list

## find pattern
pattern <- "data"
grep(pattern, txt[[1]])  # position 12
grepl(pattern, unlist(txt))          
         # returns logical, check in every position
```

***grep*** stands for: **g**lobally search a **r**egular **e**xpression and **p**rint

## Prac: finding string patterns

1.  Find all countries in gapminder that have an apostrophe (') in their name. How many different, and what are they? Special characters need an escape character: `"\'"`.

2.  Find all countries with an "e.r" pattern in their name.

3.  In the 'Analytics' text used above (the original, with just one string), replace every space with 2 spaces (gsub).

4.  You might want to read in a large number of data files in a certain directory. List all the files in your current working directory (`list.files()`). Then find the names of the .xls and .xlsx and .txt and .csv files. You should end up with a vector of these file names.

# `ggplot`: A (layered) Grammar of Graphics

A Layered Grammar of Graphics, H. Wickham: <https://www.tandfonline.com/doi/pdf/10.1198/jcgs.2009.07098>

<https://info5940.infosci.cornell.edu/notes/dataviz/grammar-of-graphics/>

### Components

-   Layer
    -   Data
    -   Mapping (which variable = x, y)
    -   Statistical transformation (count, smooth, raw)
    -   Geometric object (line, points, histogram, text, polygon)
    -   Position adjustment (position)
-   Scale (how to map the original value onto the figure)
-   Coordinate system (Cartesian, transformed axes, Polar)
-   Faceting (facet) (multiple plots on each figure)

[aesthetics]{style="color:red"} (colour, shape, size) --- also goes into `mapping`

```{r}
library(palmerpenguins)
library(ggplot2)

penguins <- palmerpenguins::penguins
```

```{r}
ggplot(data = penguins, mapping = aes(x = island, y = body_mass_g)) +
  geom_point() +
  geom_jitter()
  ggtitle("Penguins")

ggplot(data = penguins) +
  geom_point(mapping = aes(x = island, y = body_mass_g)) +
  geom_jitter(mapping = aes(x = island, y = body_mass_g)) +
  ggtitle("Penguins")

## add geom_jitter()
```

### Statistical Transformations

-   identity: $f(x) = x$
-   boxplot
-   density
-   smooth

```{r}
ggplot(penguins, 
      mapping = aes(x = species)) +
  geom_bar() +                     ## stat = count
  ggtitle(label = "Simple Bar Graph")

counts <- penguins |> 
  group_by(island, species)  |>
  summarize(n = n())
counts

ggplot(counts, 
      mapping = aes(x = island, y = n, fill = species)) +
  geom_bar(stat = "identity") +
  ggtitle(label = "A stacked bar chart")
#try building the stacked bar chart building penguins straight into gglopt (no summarize)
```

### Scale

-   from data point to aesthetic attributes (e.g. colour scale, size, character)

![4 different scales](scales.png)

```{r}
ggplot(data = penguins, mapping = aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() +
  scale_color_brewer(palette = "Dark2")
```

### Coordinates

```{r}
library(dplyr)
x1 <- rnorm(50)
y1 <- exp(x1)

dat <- tibble(x1, y1)

p1 <- ggplot(data = dat, mapping = aes(x = x1, y = y1)) +
  geom_point() +
  theme_bw() + #theme_classic makes plots look like original R
  ggtitle("Cartesian Coordinate System")

plot(p1)

p1 +
  coord_trans(y = "log10") +
  ggtitle(label = "Semi-log coordinate system")
```

### Density

```{r}
ggplot(penguins, aes(x = body_mass_g, color = species, fill = species)) +
  geom_density(alpha = 0.5) +
  xlab("body mass (g)") +
  ylab("density")
```

## More about Defaults

```{r}
ggplot() +  #empty canvas
  layer(data = penguins, 
        mapping = aes(x = flipper_length_mm, y = body_mass_g),
        geom = "point", 
        stat = "identity", #identity is to not transform the data
        position = "identity") +
  scale_x_continuous() +
  scale_y_continuous() +
  coord_cartesian()
```

-   shorter version of above:

```{r}

```

### Faceting

-   split data into subsets

```{r}
ggplot(data = penguins, 
       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point() +
  facet_wrap(facets = vars(species))   # vars to select variables
```

```{r}
ggplot(data = penguins, 
       mapping = aes(x = flipper_length_mm, y = body_mass_g)) +
  facet_grid(rows = vars(species), cols = vars(islands)) + 
  geom_point() 


  facet_wrap(facets = vars(species, islands))
  
  facet_grid(rows = vars(species), cols = vars(islands))   # vars to select variables
```

## Multiple Plots

```{r}
sample_data1<- rnorm(100, 10, 5) 
sample_data2 <- data.frame(x = rnorm(1000),        
                    y = rnorm(1000))
 
library("ggplot2") 
library("gridExtra")
 
plot1 <- ggplot(data.frame(sample_data1), aes(sample_data1)) + 
  geom_histogram(bins = 10, fill = "orange", color = "gray")
 
plot2 <- ggplot(sample_data2, aes(x = x, y = y)) + 
  geom_point(color="purple")
 
grid.arrange(plot1, plot2, ncol = 2)
```

### More Examples (lots)

```{r}
library(ggplot2)
ggplot(mpg, 
       aes(x = displ, y = hwy, color = class)) +
  geom_point()
```

```{r}
ggplot(mpg, 
       aes(x = displ, y = hwy, color = "class")) +
  geom_point(color = "blue")
```

```{r}
library(ggplot2)
library(palmerpenguins)
library(ggthemes)

ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm, y = body_mass_g)
) +
  geom_point(aes(color = species, shape = species)) +
  geom_smooth(method = "lm") +
  labs(
    title = "Body mass and flipper length",
    subtitle = "Dimensions for Adelie, Chinstrap, and Gentoo Penguins",
    x = "Flipper length (mm)", y = "Body mass (g)",
    color = "Species", shape = "Species"
  ) +
  scale_color_colorblind()
```

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = island))
```

```{r}
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(aes(color = species, shape = species)) +
  facet_wrap(~island)
```

```{r}
ggplot(penguins, aes(x = body_mass_g, color = species)) +
  geom_density(linewidth = 0.75)
```

## Geometric Objects

-   geom_point
-   line
-   smooth
-   bar
-   histogram
-   polygon
-   text

```{r}
# Left column: x and y mapping needed!
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point()

ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_smooth()

# Right column: no y mapping needed!
ggplot(data = mpg, aes(x = class)) +
  geom_bar()  

ggplot(data = mpg, aes(x = hwy)) +
  geom_histogram() 
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  geom_smooth()

```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(color = "forestgreen") +
  geom_smooth(color = "red")

```

```{r}

# color aesthetic passed to each geom layer
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  geom_smooth(se = FALSE)

# color aesthetic specified for only the geom_point layer
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point(aes(color = class)) +
  geom_smooth(se = FALSE)
```

```{r}
# bar chart of class, colored by drive (front, rear, 4-wheel)
ggplot(mpg, aes(x = class, fill = drv)) + 
  geom_bar()

```

```{r}
# default color brewer
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  scale_color_brewer()

# specifying color palette
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  scale_color_brewer(palette = "Set3")

```

<https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3>

```{r}
ggplot(mpg, aes(x = displ, y = hwy, color = class)) +
  geom_point() +
  labs(title = "Fuel Efficiency by Engine Power",
       subtitle = "Fuel economy data from 1999 and 2008 for 38 popular models of cars",
       x = "Engine power (litres displacement)",
       y = "Fuel Efficiency (miles per gallon)",
       color = "Car Type")
```

```{r}
ggplot(mpg, aes(x = displ, y = hwy)) +
  geom_point() +
  facet_grid(~ class)
```
